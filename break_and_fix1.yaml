---
- name: Perform Ceph break and fix operations
  hosts: localhost
  become: true
  vars:
    target_pg: "8.2"  # Replace with your specific PG ID
  tasks:
    - name: Break and fix operation 1
      shell: ceph auth rm osd.1
      no_log: true

    - name: Break and fix operation 1
      shell: ceph orch daemon restart osd.1
      no_log: true

    - name: Break and fix operation 2
      shell: ceph config set client.rgw rgw_zone nozone
      no_log: true

    - name: Break and fix operation 2 
      shell: ceph orch restart rgw.objectgw
      no_log: true

    - name: Break and fix operation 3 
      shell: ceph osd pool set cephfs.cephfs.meta size 5
      no_log: true

    - name: Break and fix operation 3
      shell: ceph osd pool set cephfs.cephfs.meta min_size 3
      no_log: true

    - name: Break and fix operation 3
      shell: ceph orch restart mds.cephfs
      no_log: true

    - name: Break and fix operation 4
      shell: |
        for i in {1..10000}; do
          rados setomapval large-omap-object key-$i value-$i --pool default.rgw.meta
        done
      async: 3600
      poll: 0
      no_log: true
      register: async_task

    - name: Break and fix operation 5
      shell: ceph config set mgr mgr/cephadm/container_image_nvmeof cp.icr.io/cp/ibm-ceph/nvmeof-rhel9:8-8-8-8-8
      no_log: true

    - name: Break and fix operation 5
      shell: ceph orch apply nvmeof rbd '--placement=label:nvmeof'
      ignore_errors: true
      register: deploy_result

    - name: Break 6
      shell: ceph pg map {{ target_pg }} | grep 'acting' | awk '{print $NF}' | tr -d '[]'
      register: osd_list
      changed_when: false

    - name: Break 6
      set_fact:
        pg_osds: "{{ osd_list.stdout.split(',') }}"

    - name: Break 6
      shell: ceph orch daemon stop osd.{{ item }}
      loop: "{{ pg_osds[:2] }}"  # Only stop the first two OSDs to trigger incomplete state
      ignore_errors: true


    - name: Don't stop this playbook; leave it running during the session
      async_status:
        jid: "{{ async_task.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 600
      delay: 30
